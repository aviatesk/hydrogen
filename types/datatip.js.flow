/* @flow */

/**
 * Adapted from https://github.com/TypeStrong/atom-typescript/blob/master/lib/typings/atom-ide-ui/datatip.d.ts
 * and modified by KADOWAKI, Shuhei.
 *
 * Copyright (c) 2014 TypeStrong, 2019 KADOWAKI, Shuhei
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

export type atom$DatatipService = {
  addProvider(provider: atom$DatatipProvider): atom$Disposable,
  addModifierProvider(provider: atom$ModifierDatatipProvider): atom$Disposable,
  createPinnedDataTip(
    datatip: atom$Datatip,
    editor: atom$TextEditor,
    options?: atom$PinnedDatatipOptions,
  ): atom$Disposable
}

type atom$PinnedDatatipOptions = {
  // Defaults to 'end-of-line'.
  position?: atom$PinnedDatatipPosition,
  // Defaults to true.
  showRangeHighlight?: boolean
}

type atom$PinnedDatatipPosition = "end-of-line" | "above-range"

type atom$DatatipProvider = {
  priority: number,
  grammarScopes?: Array<string>,
  // A unique name for the provider to be used for analytics.
  // It is recommended that it be the name of the provider's package.
  providerName: string,
  datatip(
    editor: atom$TextEditor,
    bufferPosition: atom$Point,
    mouseEvent: MouseEvent
  ): Promise<?atom$Datatip>
}

type atom$ModifierDatatipProvider = {
  priority: number,
  grammarScopes?: string[],
  providerName: string,
  modifierDatatip(
    editor: atom$TextEditor,
    bufferPosition: atom$Point,
    heldKeys: Set<ModifierKey>,
  ): Promise<?atom$Datatip>
}

type ModifierKey = "metaKey" | "shiftKey" | "altKey" | "ctrlKey"

type atom$Datatip =
  | {
      markedStrings: MarkedString[],
      range: atom$Range,
      pinnable?: boolean
    }
  | {
      component: any, // React component
      range: atom$Range,
      pinnable?: boolean
    }

type MarkedString =
  | {
      type: "markdown",
      value: string,
    }
  | {
      type: "snippet",
      grammar: atom$Grammar,
      value: string
    }
